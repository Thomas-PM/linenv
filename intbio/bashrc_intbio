# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# Greeting from fortune cow
COWSAYCLIP=$(fortune | cowsay)
COWSAYCLIPTIME=$(date +%b-%d-%Y_%H:%M:%S)
echo "Fortune Cow says:"
echo "${COWSAYCLIP}"
echo "\$cowclip to save"

# save this fortune cow
cowclip() {
	echo "" >> ~/.fortune_cow_clips
	echo "-----------------------------------------------------------------------" >> ~/.fortune_cow_clips
	echo "${COWSAYCLIPTIME}" >> ~/.fortune_cow_clips
	echo "${COWSAYCLIP}" >> ~/.fortune_cow_clips
	echo "-----------------------------------------------------------------------" >> ~/.fortune_cow_clips
	echo "" >> ~/.fortune_cow_clips
	echo "Cowsay has been clipped. run alias \$forcowclips to view it"
}


# Directory manuevering
PREV_DIR_SIZE=10
		# Directory history array and init
PREV_DIR=()
for i in $(seq 1 $PREV_DIR_SIZE); do
	PREV_DIR+=(~)
done
PREV_DIR_IDX=$((PREV_DIR_SIZE -1))

		# List recent directories
recent() {
	echo Recent directories:
	echo Currently on $PREV_DIR_IDX
	for d in ${!PREV_DIR[@]}; do
		if [[ $d -eq $PREV_DIR_IDX ]]; then
			echo \>\>\>\>\>\>\>\> $d : ${PREV_DIR[$d]}
		else	
			echo -e '\t' $d : ${PREV_DIR[$d]}
		fi
	done
}

		# Quickly jump back to a recent directory
back() {
	DIR_IDX=$PREV_DIR_IDX
	if [[ $# -eq 0 ]]; then
		DIR_IDX=$PREV_DIR_IDX
	else
		DIR_IDX=$1
	fi
	echo $DIR_IDX
	cd ${PREV_DIR[$DIR_IDX]}
		

}

# Overwrite the builtin cd command to also save current dir
cd() {
	PREV_DIR_IDX=$((  $(($PREV_DIR_IDX + 1)) % $PREV_DIR_SIZE))
	PREV_DIR[PREV_DIR_IDX]=$(pwd)
	builtin cd ${1}
}



# git repo management
TRACKED_REPOS=(src/ib_libs src/ib_tools src/ib_warmer src/lb_fwsrv_c)
LAST_FETCH=~/.lastfetch

#git fetch in all tracked repos
fetchall() {
	FETCHALL_RET_DIR=$(pwd)
	echo "Performing git fetch in all tracked repos..."
	for i in ${TRACKED_REPOS[@]}; do
		cd ${BI_BUILD_PATH}/$i
		pwd
		git fetch -p
	done
	touch $LAST_FETCH
	cd ${FETCHALL_RET_DIR}
}

#finish a feature branch that has been merged already remotely
finish() {
	CURR_BRANCH=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
	git checkout develop
	git fetch -p
	git rebase
	git checkout $CURR_BRANCH
	git flow feature finish
}

com() {
	git add .
	eval "git commit -m \"${1}\""
}


#eclipse
ECLIPSELAUNCHOUTPUT=~/eclipse_launch.log
eclipse() {
	touch $ECLIPSELAUNCHOUTPUT
	echo "Launching Eclipse 2021. This is an alias. Output stored at $ECLIPSELAUNCHOUTPUT"
	sudo bash -c "~/Downloads/eclipse/eclipse > $ECLIPSELAUNCHOUTPUT 2>&1 &"
}


# bash aliases for lifeborne environments
export BUILD_NUM=153
export FEATURE=001
export TRG_IP=172.17.2.122
FILE=${HOME}/src/ib_build/tools/bash_aliases
if [ -f ${FILE} ]; then
    source ${FILE}
fi

fws > /dev/null
#fetchall if it hasn't been run in 2 hours
if test `find $LAST_FETCH -mmin +120`
then
	fetchall
fi


